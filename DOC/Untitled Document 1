Comandos Angular.

ng-serve  -> inicia o projeto é deixado executado, enquanto desenvolvemos nosso projeto!
path: ' ' -> passar caminho
pathMatch:'full' - > analisa se nao retorna nada

toll bar {
1º passo - importar apti da toll bar com em app.module.ts ->imports :
import {MatToolbarModule} from '@angular/material/toolbar';
2º passo - colar o nome do module na seção imports da app.module
3º Usar o tshero para organizar os imports.

4º passo -> ir até app.component.html 
5º passo -> apagar tudo
6º passo -> colar o codigo da toll bar escolhida no Andular material
}

LISTA DE PACIENTES + roteamento - 

1º passo -> CRIAR MODULO - ng g m <nome do modulo> -- routing
2º passo ->criar componenete dento do modulo de cursos
	ng g c nomeModulo/nomeComponente
	
3º passo -> declar rota em pacientes-routing.module
	dentro da rota colocar {path: ' ', componets: PacientesComponets }
	
4º passo -> na rota global app-routing.modulecolocar :
	{path: ' ', component : 'pacientes'}
5º passo configurar rota de pacientes
	{path:'pacientes', loadChildren:() => import ('./pacientes/pacientes.module').then(m => m.PacientesModule) }
	
5º passo -> ir em app.component.html e inserir :
	<router-outlet></router-outlet>



6º passo definindo cores - em style.scss
	
importar tehmas
	@import '@angular/material/theming';
	@include mat-core();
definir cores	
	$custom-app-primary: mat-palette($mat-cyan, 500);
	$custom-app-secondary: mat-palette($mat-blue, 200);
	$custom-app-warn: mat-palette($mat-red);
definir cores thema
	$custom-theme: mat-light-theme((
 	color: (
   	primary: $custom-app-primary,
   	accent: $custom-app-secondary,
   	warn: $custom-app-warn,
 	)
	));
incluir thema
	@include angular-material-theme($custom-theme);



7ª passo : Criando tabela de pacientes:

ir até Pacientes Component:
	import {MatTableModule} from '@angular/material/table';

no pacientes.html copiar
<table mat-table [dataSource]="dataSource" class="mat-elevation-z8">

  <!--- Note that these columns can be defined in any order.
        The actual rendered columns are set as a property on the row definition" -->

  <!-- Position Column -->
  <ng-container matColumnDef="position">
    <th mat-header-cell *matHeaderCellDef> No. </th>
    <td mat-cell *matCellDef="let element"> {{element.position}} </td>
  </ng-container>

  <!-- Name Column -->
  <ng-container matColumnDef="name">
    <th mat-header-cell *matHeaderCellDef> Name </th>
    <td mat-cell *matCellDef="let element"> {{element.name}} </td>
  </ng-container>

  <!-- Weight Column -->
  <ng-container matColumnDef="weight">
    <th mat-header-cell *matHeaderCellDef> Weight </th>
    <td mat-cell *matCellDef="let element"> {{element.weight}} </td>
  </ng-container>

  <!-- Symbol Column -->
  <ng-container matColumnDef="symbol">
    <th mat-header-cell *matHeaderCellDef> Symbol </th>
    <td mat-cell *matCellDef="let element"> {{element.symbol}} </td>
  </ng-container>

  <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>
  <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>
</table>


no pacientes.module.ts  implementar o datasource:

** A variavél deve ser public:

	cirar a variavel array de cursos:
		pacientes: any[] = [];

	criar uma interface com ng interface modulo/pasta/nomearquivo
	
	Passar parametro, como nome, cpf, e-mail e um _id para o db.
	
	trocar o nome da variavél de any para paciente- nome dainterface
	
	inicializar o contrutor com [] vazio.
	constructor() {
    		this.pacientes = [];
 	 }


Definir no pacientes component.html os nomes e tipos das colunas.

inicializar os pacientes em paciente-components.ts




	

